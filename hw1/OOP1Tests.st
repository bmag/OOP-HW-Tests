TestCase subclass: #OOP1TestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!OOP1TestCase methodsFor: 'testing' stamp: 'BM 11/6/2020 23:26'!assertError: aBlock	"Execute a block (aBlock) and assert that it raises an error."	| message |	self assert: ([aBlock value. false] on: Error do: [:error | message := (error messageText). true])		description: 'expected error for invalid input'.	self assert: (message = 'invalid input') description: 'wrong error message for invalid input'! !OOP1TestCase subclass: #MonomDerivativeTest	instanceVariableNames: 'monom'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!MonomDerivativeTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:28'!setUp	monom := Monom new! !!MonomDerivativeTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:30'!testPositiveExpNegativeCoef	monom exp: 3; coef: -2.	self assert: 2 equals: (monom derivative exp).	self assert: -6 equals: (monom derivative coef)! !!MonomDerivativeTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:30'!testPositiveExpPositiveCoef	monom exp: 3; coef: 2.	self assert: 2 equals: (monom derivative exp).	self assert: 6 equals: (monom derivative coef)! !!MonomDerivativeTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:36'!testPositiveExpZeroCoef	monom exp: 3; coef: 0.	self assert: 0 equals: (monom derivative coef)! !!MonomDerivativeTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:32'!testZeroExpNegativeCoef	monom exp: 0; coef: -2.	self assert: 0 equals: (monom derivative exp).	self assert: 0 equals: (monom derivative coef)! !!MonomDerivativeTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:32'!testZeroExpPositiveCoef	monom exp: 0; coef: 2.	self assert: 0 equals: (monom derivative exp).	self assert: 0 equals: (monom derivative coef)! !!MonomDerivativeTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:36'!testZeroExpZeroCoef	monom exp: 0; coef: 0.	self assert: 0 equals: (monom derivative coef)! !OOP1TestCase subclass: #MonomTest	instanceVariableNames: 'monom'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 22:56'!setUp	monom := Monom new.! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 22:58'!testInitCoef	self assert: 0 equals: (monom coef) .! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 22:58'!testInitExp	self assert: 0 equals: (monom exp) .! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:05'!testSetLegalCoef	monom coef: 3.	self assert: 3 equals: (monom coef) .! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:33'!testSetLegalExp	monom exp: 3.	self assert: 3 equals: (monom exp) .! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:34'!testSetNegativeExp	self assertError: [monom exp: -1]! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:11'!testSetNonIntegerCoef	self assertError: [monom coef: 'foo']! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:33'!testSetNonIntegerExp	self assertError: [monom exp: 'foo']! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 22:59'!testSetZeroCoef	monom coef: 0.	self assert: 0 equals: (monom coef) .! !!MonomTest methodsFor: 'testing' stamp: 'BM 11/6/2020 23:33'!testSetZeroExp	monom exp: 0.	self assert: 0 equals: (monom exp) .! !OOP1TestCase subclass: #PolyStreamTestCase	instanceVariableNames: 'poly'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolyStreamTestCase methodsFor: 'testing' stamp: 'BM 11/7/2020 10:34'!setUp	poly := PolyStream new.! !PolyStreamTestCase subclass: #PolyStreamAdd	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolyStreamAdd methodsFor: 'testing' stamp: 'BM 11/7/2020 10:59'!test1	self assertError: [poly add: 'foo'].	self assertError: [poly add: 0].! !!PolyStreamAdd methodsFor: 'testing' stamp: 'BM 11/7/2020 10:59'!test2	| x |	x := (Monom new).	self assertError: [poly add: x].	x := (Polynom new).	self assertError: [poly add: x].! !!PolyStreamAdd methodsFor: 'testing' stamp: 'BM 11/7/2020 11:00'!test3	| other |	other := (PolyStream new).	poly add: other.	self assert: 0 equals: (poly eval: 0).	self assert: 0 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).! !!PolyStreamAdd methodsFor: 'testing' stamp: 'BM 11/7/2020 11:01'!test4	| other |	poly addCoef: 1 withExp: 1.	other := (PolyStream new).	poly add: other.	self assert: 0 equals: (poly eval: 0).	self assert: 1 equals: (poly eval: 1).	self assert: 2 equals: (poly eval: 2).! !!PolyStreamAdd methodsFor: 'testing' stamp: 'BM 11/7/2020 11:05'!test5	| other |	other := (PolyStream new).	other addCoef: 2 withExp: 1.	poly add: other.	self assert: 0 equals: (poly eval: 0).	self assert: 2 equals: (poly eval: 1).	self assert: 4 equals: (poly eval: 2).! !!PolyStreamAdd methodsFor: 'testing' stamp: 'BM 11/7/2020 11:04'!test6	| other |	poly addCoef: 1 withExp: 1.	other := (PolyStream new).	other addCoef: 2 withExp: 2.	poly add: other.	self assert: 0 equals: (poly eval: 0).	self assert: 3 equals: (poly eval: 1).	self assert: 10 equals: (poly eval: 2).		poly add: ((PolyStream new) addCoef: -5 withExp: 0).	self assert: -5 equals: (poly eval: 0).	self assert: -2 equals: (poly eval: 1).	self assert: 5 equals: (poly eval: 2).! !PolyStreamTestCase subclass: #PolyStreamAddCoefWithExp	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolyStreamAddCoefWithExp methodsFor: 'testing' stamp: 'BM 11/7/2020 10:51'!test1	self assertError: [poly addCoef: 'foo' withExp: 1].	self assertError: [poly addCoef: 1 withExp: 'bar'].! !!PolyStreamAddCoefWithExp methodsFor: 'testing' stamp: 'BM 11/7/2020 10:52'!test2	self assertError: [poly addCoef: 2 withExp: -1].! !!PolyStreamAddCoefWithExp methodsFor: 'testing' stamp: 'BM 11/7/2020 12:36'!test3	poly := PolyStream new.	poly addCoef: 0 withExp: 0.	self assert: 0 equals: (poly eval: 1).! !!PolyStreamAddCoefWithExp methodsFor: 'testing' stamp: 'BM 11/7/2020 10:53'!test4	poly addCoef: 0 withExp: 1.	self assert: 0 equals: (poly eval: 1).! !!PolyStreamAddCoefWithExp methodsFor: 'testing' stamp: 'BM 11/7/2020 10:53'!test5	poly addCoef: 1 withExp: 0.	self assert: 1 equals: (poly eval: 1).	self assert: 1 equals: (poly eval: 2).! !!PolyStreamAddCoefWithExp methodsFor: 'testing' stamp: 'BM 11/7/2020 10:55'!test6	poly addCoef: 1 withExp: 2.	self assert: 1 equals: (poly eval: 1).	self assert: 4 equals: (poly eval: 2).	self assert: 1 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: -2).		poly addCoef: 2 withExp: 1.	self assert: 3 equals: (poly eval: 1).	self assert: 8 equals: (poly eval: 2).	self assert: -1 equals: (poly eval: -1).	self assert: 0 equals: (poly eval: -2).! !!PolyStreamAddCoefWithExp methodsFor: 'testing' stamp: 'BM 11/7/2020 14:08'!test7	poly addCoef: 2 withExp: 2.	self assert: 2 equals: (poly eval: 1).	self assert: 8 equals: (poly eval: 2).	self assert: 2 equals: (poly eval: -1).	self assert: 8 equals: (poly eval: -2).! !PolyStreamTestCase subclass: #PolyStreamInit	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolyStreamInit methodsFor: 'testing' stamp: 'BM 11/7/2020 10:37'!test1	self assert: 0 equals: (poly eval: 0).	self assert: 0 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).! !!PolyStreamInit methodsFor: 'testing' stamp: 'BM 11/7/2020 10:46'!test2	self assertError: [poly eval: 'foo'].! !PolyStreamTestCase subclass: #PolyStreamMultiplyBy	instanceVariableNames: 'poly2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:10'!setUp	"Set poly to (x - 2)^2 and poly2 to 0."	poly := ((PolyStream new)		addCoef: 1 withExp: 2 ;		addCoef: (-4) withExp: 1 ;		addCoef: 4 withExp: 0).	poly2 := (PolyStream new).! !!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:13'!test1	self assert: 9 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: 0).	self assert: 1 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:27'!test2	self assertError: [poly multiplyBy: 'foo'].! !!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:32'!test3	poly multiplyBy: 1.	self assert: 9 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: 0).	self assert: 1 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).	poly2 multiplyBy: 1.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:32'!test4	poly multiplyBy: -1.	self assert: -9 equals: (poly eval: -1).	self assert: -4 equals: (poly eval: 0).	self assert: -1 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).	poly2 multiplyBy: -1.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:33'!test5	poly multiplyBy: 2.	self assert: 18 equals: (poly eval: -1).	self assert: 8 equals: (poly eval: 0).	self assert: 2 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).	poly2 multiplyBy: 2.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:34'!test6	poly multiplyBy: 2.	poly multiplyBy: 3.	self assert: 54 equals: (poly eval: -1).	self assert: 24 equals: (poly eval: 0).	self assert: 6 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).	poly2 multiplyBy: 2.	poly2 multiplyBy: 3.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamMultiplyBy methodsFor: 'testing' stamp: 'BM 11/7/2020 11:28'!test7	poly multiplyBy: 0.	self assert: 0 equals: (poly eval: -1).	self assert: 0 equals: (poly eval: 0).	self assert: 0 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).	poly2 multiplyBy: 0.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !PolyStreamTestCase subclass: #PolyStreamSubstitute	instanceVariableNames: 'poly2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolyStreamSubstitute methodsFor: 'testing' stamp: 'BM 11/7/2020 11:10'!setUp	"Set poly to (x - 2)^2 and poly2 to 0."	poly := ((PolyStream new)		addCoef: 1 withExp: 2 ;		addCoef: (-4) withExp: 1 ;		addCoef: 4 withExp: 0).	poly2 := (PolyStream new).! !!PolyStreamSubstitute methodsFor: 'testing' stamp: 'BM 11/7/2020 11:13'!test1	self assert: 9 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: 0).	self assert: 1 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).		self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamSubstitute methodsFor: 'testing' stamp: 'BM 11/7/2020 11:13'!test2	self assertError: [poly substitute: 'foo'].	self assertError: [poly substitute: 0].! !!PolyStreamSubstitute methodsFor: 'testing' stamp: 'BM 11/7/2020 11:13'!test3	poly substitute: 1.	self assert: 9 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: 0).	self assert: 1 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 2).		poly2 substitute: 1.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamSubstitute methodsFor: 'testing' stamp: 'BM 11/7/2020 11:14'!test4	poly substitute: -1.	self assert: 1 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: 0).	self assert: 9 equals: (poly eval: 1).	self assert: 16 equals: (poly eval: 2).		poly2 substitute: -1.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamSubstitute methodsFor: 'testing' stamp: 'BM 11/7/2020 11:15'!test5	poly substitute: 2.	self assert: 16 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: 0).	self assert: 0 equals: (poly eval: 1).	self assert: 4 equals: (poly eval: 2).		poly2 substitute: 2.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !!PolyStreamSubstitute methodsFor: 'testing' stamp: 'BM 11/7/2020 11:20'!test6	poly substitute: 2.	poly substitute: 3.	self assert: 64 equals: (poly eval: -1).	self assert: 4 equals: (poly eval: 0).	self assert: 16 equals: (poly eval: 1).	self assert: 100 equals: (poly eval: 2).		poly2 substitute: 2.	poly2 substitute: 3.	self assert: 0 equals: (poly2 eval: 0).	self assert: 0 equals: (poly2 eval: 1).	self assert: 0 equals: (poly2 eval: 2).! !OOP1TestCase subclass: #PolynomTestCase	instanceVariableNames: 'poly'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolynomTestCase methodsFor: 'testing' stamp: 'BM 11/7/2020 09:06'!assertMonoms: aTuple	"Assert that test polynom contains same monoms as aTuple."	self assertMonoms: aTuple of: poly! !!PolynomTestCase methodsFor: 'testing' stamp: 'BM 11/7/2020 09:05'!assertMonoms: aTuple of: aPoly	"Assert that polynom aPoly contains same monoms as aTuple."	self assert: (Dictionary newFrom: aTuple) equals: (aPoly asDictionary)! !!PolynomTestCase methodsFor: 'testing' stamp: 'BM 11/7/2020 08:53'!makeMonom: exp coef: coef	^((Monom new) exp: exp ; coef: coef)! !!PolynomTestCase methodsFor: 'testing' stamp: 'BM 11/7/2020 08:42'!setUp	poly := Polynom new.! !PolynomTestCase subclass: #PolynomTestAddMonom	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolynomTestAddMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 08:59'!test1	poly addMonom: (self makeMonom: 2 coef: 1).	self assertMonoms: {2->1}.	poly addMonom: (self makeMonom: 1 coef: -3).	self assertMonoms: {1->(-3). 2->1}.	poly addMonom: (self makeMonom: 0 coef: 1).	self assertMonoms: {0->1. 1->(-3). 2->1}! !!PolynomTestAddMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 08:57'!test2	poly addMonom: (self makeMonom: 2 coef: 0).	self assertMonoms: {}.! !!PolynomTestAddMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 08:58'!test3	poly addMonom: (self makeMonom: 4 coef: -3).	self assertMonoms: {4->(-3)}.	poly addMonom: (self makeMonom: 4 coef: 3).	self assertMonoms: {}.! !!PolynomTestAddMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 08:59'!test4	poly addMonom: (self makeMonom: 2 coef: 1).	poly addMonom: (self makeMonom: 4 coef: -3).	self assertMonoms: {2->1. 4->(-3)}.	poly addMonom: (self makeMonom: 4 coef: 3).	self assertMonoms: {2->1.}.! !!PolynomTestAddMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:01'!test5	poly addMonom: (self makeMonom: 10 coef: 1).	self assertMonoms: {10->1}.	poly addMonom: (self makeMonom: 100 coef: 1).	self assertMonoms: {10->1. 100->1}.	poly addMonom: (self makeMonom: 1000 coef: 1).	self assertMonoms: {10->1. 100->1. 1000->1}.	poly addMonom: (self makeMonom: 10000 coef: 1).	self assertMonoms: {10->1. 100->1. 1000->1. 10000->1}.! !!PolynomTestAddMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 15:08'!test6	poly addMonom: (self makeMonom: 2 coef: 3).	poly addMonom: (self makeMonom: 1 coef: 2).	poly addMonom: (self makeMonom: 0 coef: 0).	Transcript show: poly asDictionary ; cr.	self assertMonoms: {1->2. 2->3}.! !PolynomTestCase subclass: #PolynomTestAddPolynom	instanceVariableNames: 'poly2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:33'!setUp	poly := ((Polynom new)		addMonom: (self makeMonom: 2 coef: 1) ;		addMonom: (self makeMonom: 3 coef: -1) ;		addMonom: (self makeMonom: 0 coef: 4)).	poly2 := (Polynom new)! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:43'!testAddMonomCancelExp	| other |	other := ((Polynom new)		addMonom: (self makeMonom: 2 coef: -1)).	poly := poly add: other.	self assertMonoms: {0->4. 3->(-1)} of: poly.! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:37'!testAddMonomNewExp	| other |	other := ((Polynom new)		addMonom: (self makeMonom: 5 coef: 2)).	poly := poly add: other.	self assertMonoms: {0->4. 2->1. 3->(-1). 5->2} of: poly.	poly2 := poly2 add: other.	self assertMonoms: {5->2} of: poly2.! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:38'!testAddMonomOldExp	| other |	other := ((Polynom new)		addMonom: (self makeMonom: 2 coef: 2)).	poly := poly add: other.	self assertMonoms: {0->4. 2->3. 3->(-1)} of: poly.! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:39'!testAddPolynom	| other |	other := ((Polynom new)		addMonom: (self makeMonom: 5 coef: 2) ;		addMonom: (self makeMonom: 0 coef: -2) ;		addMonom: (self makeMonom: 3 coef: 3)).	poly := poly add: other.	self assertMonoms: {0->2. 2->1. 3->2. 5->2} of: poly.	poly2 := poly2 add: other.	self assertMonoms: {0->(-2). 3->3. 5->2} of: poly2.! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:40'!testAddPolynomTwice	| other |	other := ((Polynom new)		addMonom: (self makeMonom: 5 coef: 2) ;		addMonom: (self makeMonom: 0 coef: -2) ;		addMonom: (self makeMonom: 3 coef: 3)).	poly := poly add: other.	poly := poly add: other.	self assertMonoms: {2->1. 3->5. 5->4} of: poly.	poly2 := poly2 add: other.	poly2 := poly2 add: other.	self assertMonoms: {0->(-4). 3->6. 5->4} of: poly2.! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:49'!testIndependenceOfNew1	| other final |	other := ((Polynom new)		addMonom: (self makeMonom: 5 coef: 2) ;		addMonom: (self makeMonom: 3 coef: 3)).	final := poly add: other.	self assertMonoms: {0->4. 2->1. 3->2. 5->2} of: final.	poly := poly add: final.	other := other add: final.	self assertMonoms: {0->4. 2->1. 3->2. 5->2} of: final.! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:50'!testIndependenceOfNew2	| other final |	other := ((Polynom new)		addMonom: (self makeMonom: 5 coef: 2) ;		addMonom: (self makeMonom: 3 coef: 3)).	final := poly2 add: other.	self assertMonoms: {3->3. 5->2} of: final.	poly2 := poly2 add: final.	other := other add: final.	self assertMonoms: {3->3. 5->2} of: final.! !!PolynomTestAddPolynom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:47'!testIndependenceOfOriginal	| other final |	other := ((Polynom new)		addMonom: (self makeMonom: 5 coef: 2) ;		addMonom: (self makeMonom: 3 coef: 3)).	final := poly add: other.	self assertMonoms: {0->4. 2->1. 3->(-1)} of: poly.	self assertMonoms: {3->3. 5->2} of: other.	self assertMonoms: {0->4. 2->1. 3->2. 5->2} of: final.	final := poly2 add: other.	self assertMonoms: {} of: poly2.	final := final add: final.	self assertMonoms: {3->3. 5->2} of: other.	self assertMonoms: {3->6. 5->4} of: final.! !PolynomTestCase subclass: #PolynomTestDerivative	instanceVariableNames: 'poly2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolynomTestDerivative methodsFor: 'testing' stamp: 'BM 11/7/2020 09:23'!setUp	poly := ((Polynom new)		addMonom: (self makeMonom: 2 coef: 1) ;		addMonom: (self makeMonom: 3 coef: -1) ;		addMonom: (self makeMonom: 0 coef: 4)).	poly2 := (Polynom new)! !!PolynomTestDerivative methodsFor: 'testing' stamp: 'BM 11/7/2020 09:29'!testIndependenceOfDerivative	| deriv |	deriv := poly derivative.	self assertMonoms: {1->2. 2->(-3)} of: deriv.	self assertMonoms: {0->4. 2->1. 3->(-1)} of: poly.	poly addMonom: (self makeMonom: 1 coef: 1).	self assertMonoms: {1->2. 2->(-3)} of: deriv.		deriv := poly2 derivative.	self assertMonoms: {} of: deriv.	poly2 addMonom: (self makeMonom: 1 coef: 1).	self assertMonoms: {} of: deriv.	! !!PolynomTestDerivative methodsFor: 'testing' stamp: 'BM 11/7/2020 09:27'!testIndependenceOfOriginal	| deriv |	deriv := poly derivative.	self assertMonoms: {1->2. 2->(-3)} of: deriv.	self assertMonoms: {0->4. 2->1. 3->(-1)} of: poly.	deriv := poly2 derivative.	self assertMonoms: {} of: deriv.	deriv addMonom: (self makeMonom: 1 coef: 1).	self assertMonoms: {} of: poly2.	! !!PolynomTestDerivative methodsFor: 'testing' stamp: 'BM 11/7/2020 09:31'!testMultiple	poly := poly derivative.	self assertMonoms: {1->2. 2->(-3)} of: poly.	poly := poly derivative.	self assertMonoms: {0->2. 1->(-6)} of: poly.	poly := poly derivative.	self assertMonoms: {0->(-6)} of: poly.	poly := poly derivative.	self assertMonoms: {} of: poly.	poly := poly derivative.	self assertMonoms: {} of: poly.! !!PolynomTestDerivative methodsFor: 'testing' stamp: 'BM 11/7/2020 15:08'!testSingle	| deriv |	deriv := poly derivative.	self assertMonoms: {1->2. 2->(-3)} of: deriv.	deriv := poly2 derivative.	self assertMonoms: {} of: deriv.	! !PolynomTestCase subclass: #PolynomTestEval	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolynomTestEval methodsFor: 'testing' stamp: 'BM 11/7/2020 09:52'!test1	self assert: 0 equals: (poly eval: 1).	self assert: 0 equals: (poly eval: 5).	self assert: 0 equals: (poly eval: 0).! !!PolynomTestEval methodsFor: 'testing' stamp: 'BM 11/7/2020 09:53'!test2	poly addMonom: (self makeMonom: 0 coef: 2).	self assert: 2 equals: (poly eval: 1).	self assert: 2 equals: (poly eval: 5).	self assert: 2 equals: (poly eval: 0).! !!PolynomTestEval methodsFor: 'testing' stamp: 'BM 11/7/2020 09:53'!test3	poly addMonom: (self makeMonom: 2 coef: 1).	self assert: 1 equals: (poly eval: 1).	self assert: 25 equals: (poly eval: 5).	self assert: 0 equals: (poly eval: 0).! !!PolynomTestEval methodsFor: 'testing' stamp: 'BM 11/7/2020 09:54'!test4	poly		addMonom: (self makeMonom: 2 coef: 1) ;		addMonom: (self makeMonom: 0 coef: 2).	self assert: 3 equals: (poly eval: 1).	self assert: 27 equals: (poly eval: 5).	self assert: 2 equals: (poly eval: 0).! !!PolynomTestEval methodsFor: 'testing' stamp: 'BM 11/7/2020 10:00'!test5	poly		addMonom: (self makeMonom: 2 coef: 1) ;		addMonom: (self makeMonom: 1 coef: -3) ;		addMonom: (self makeMonom: 0 coef: 2).	self assert: 0 equals: (poly eval: 1).	self assert: 12 equals: (poly eval: 5).	self assert: 2 equals: (poly eval: 0).	self assert: 12 equals: (poly eval: -2).! !!PolynomTestEval methodsFor: 'testing' stamp: 'BM 11/7/2020 10:01'!test6	poly addMonom: (self makeMonom: 3 coef: -2).	self assert: -2 equals: (poly eval: 1).	self assert: 2 equals: (poly eval: -1).	self assert: 0 equals: (poly eval: 0).	self assert: -16 equals: (poly eval: 2).	self assert: 16 equals: (poly eval: -2).! !PolynomTestCase subclass: #PolynomTestInit	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolynomTestInit methodsFor: 'testing' stamp: 'BM 11/7/2020 08:49'!testInitEmpty	self assertMonoms: {}! !PolynomTestCase subclass: #PolynomTestMultiplyByMonom	instanceVariableNames: 'poly2'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Tests'!!PolynomTestMultiplyByMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:09'!setUp	poly := ((Polynom new)		addMonom: (self makeMonom: 2 coef: 1) ;		addMonom: (self makeMonom: 3 coef: -1) ;		addMonom: (self makeMonom: 0 coef: 4)).	poly2 := (Polynom new)! !!PolynomTestMultiplyByMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:19'!testByNormal1	| monom |	monom := (self makeMonom: 1 coef: 4).	poly multiplyByMonom: monom.	self assertMonoms: {1->16. 3->4. 4->(-4)} of: poly.	poly2 multiplyByMonom: monom.	self assertMonoms: {} of: poly2! !!PolynomTestMultiplyByMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:20'!testByNormal2	| monom |	monom := (self makeMonom: 3 coef: -2).	poly multiplyByMonom: monom.	self assertMonoms: {3->(-8). 5->(-2). 6->2} of: poly.	poly2 multiplyByMonom: monom.	self assertMonoms: {} of: poly2! !!PolynomTestMultiplyByMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:17'!testByNumber1	| one |	one := (self makeMonom: 0 coef: 1).	poly multiplyByMonom: one.	"poly shouldn't change"	self assertMonoms: (poly asDictionary) of: poly.	poly2 multiplyByMonom: one.	"poly2 should remain empty"	self assertMonoms: {} of: poly2! !!PolynomTestMultiplyByMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:18'!testByNumber2	| monom |	monom := (self makeMonom: 0 coef: 4).	poly multiplyByMonom: monom.	self assertMonoms: {0->16. 2->4. 3->(-4)} of: poly.	poly2 multiplyByMonom: monom.	self assertMonoms: {} of: poly2! !!PolynomTestMultiplyByMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:13'!testByZero1	| zero |	zero := (self makeMonom: 0 coef: 0).	poly multiplyByMonom: zero.	self assertMonoms: {} of: poly.	poly2 multiplyByMonom: zero.	self assertMonoms: {} of: poly2! !!PolynomTestMultiplyByMonom methodsFor: 'testing' stamp: 'BM 11/7/2020 09:15'!testByZero2	| zero |	zero := (self makeMonom: 2 coef: 0).	poly multiplyByMonom: zero.	self assertMonoms: {} of: poly.	poly2 multiplyByMonom: zero.	self assertMonoms: {} of: poly2! !